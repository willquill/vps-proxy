---
# Traefik setup tasks

- name: Install Apache utils (for htpasswd)
  ansible.builtin.apt:
    name: apache2-utils
    state: present

- name: Ensure Traefik config directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    mode: "0755"
  with_items:
    - "{{ repo_dest }}/config/traefik"
    - "{{ repo_dest }}/config/traefik/config"
    - "{{ repo_dest }}/var/log/traefik"

- name: Generate bcrypt htpasswd line
  ansible.builtin.command: |
    htpasswd -nbB {{ traefik_username }} {{ traefik_password }}
  register: deploy_htpasswd_line
  changed_when: false

- name: Write htpasswd file
  ansible.builtin.copy:
    content: "{{ deploy_htpasswd_line.stdout }}"
    dest: "{{ repo_dest }}/config/traefik/usersfile.txt"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    mode: "0600"

- name: Generate Traefik main configuration
  ansible.builtin.template:
    src: traefik.yml.j2
    dest: "{{ repo_dest }}/config/traefik/traefik.yml"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    mode: "0644"

- name: Generate Traefik middlewares configuration
  ansible.builtin.template:
    src: middlewares.yml.j2
    dest: "{{ repo_dest }}/config/traefik/config/middlewares.yml"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    mode: "0644"

- name: Generate Traefik services configuration
  ansible.builtin.template:
    src: services.yml.j2
    dest: "{{ repo_dest }}/config/traefik/config/services.yml"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    mode: "0644"

- name: Create empty acme.json file if it doesn't exist
  ansible.builtin.file:
    path: "{{ repo_dest }}/config/traefik/acme.json"
    state: touch
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    mode: "0600"
    modification_time: preserve
    access_time: preserve
  changed_when: false

- name: Create docker proxy network if it doesn't exist
  ansible.builtin.command: docker network create proxy
  register: deploy_create_network_result
  failed_when:
    - deploy_create_network_result.rc != 0
    - "'already exists' not in deploy_create_network_result.stderr"
