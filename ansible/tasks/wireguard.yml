---
# WireGuard setup tasks

- name: Install WireGuard
  apt:
    name:
      - wireguard
      - iptables-persistent # For persistent firewall rules
    state: present

- name: Enable IP forwarding for IPv4
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: yes

- name: Generate WireGuard private key
  command: "wg genkey"
  register: wg_private_key
  changed_when: false
  args:
    creates: "{{ wireguard_private_key_path }}"

- name: Save WireGuard private key
  copy:
    content: "{{ wg_private_key.stdout }}"
    dest: "{{ wireguard_private_key_path }}"
    mode: '0600'
  when: wg_private_key.stdout != ''

- name: Generate WireGuard public key
  command: "echo {{ wg_private_key.stdout }} | wg pubkey"
  register: wg_public_key
  changed_when: false
  when: wg_private_key.stdout != ''

- name: Save WireGuard public key
  copy:
    content: "{{ wg_public_key.stdout }}"
    dest: "{{ wireguard_public_key_path }}"
    mode: '0644'
  when: wg_public_key.stdout != ''

- name: Create WireGuard config
  copy:
    dest: "{{ wireguard_config_path }}"
    content: |
      [Interface]
      Address = {{ wireguard_address }}
      ListenPort = {{ wireguard_port }}
      PrivateKey = {{ wg_private_key.stdout }}
      SaveConfig = true
      
      # PostUp rules for forwarding traffic and setting up NAT
      PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
      
      # PostDown rules to clean up when the interface goes down
      PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
      
      # Add peers below using:
      #[Peer]
      #PublicKey = peer_public_key
      #AllowedIPs = {{ wireguard_peer1 }}
  notify: Restart WireGuard

- name: Create README in wireguard directory
  copy:
    dest: "/etc/wireguard/README.md"
    content: |
      # WireGuard VPN Configuration
      
      ## Server Details
      
      - Public Key: `{{ wg_public_key.stdout | default('Run "cat /etc/wireguard/publickey" to get the public key') }}`
      - IP Address: `{{ wireguard_address }}`
      - Listen Port: `{{ wireguard_port }}`
      
      ## Adding Peers
      
      To add a new peer (client), get their public key and run:
      
      ```bash
      # Replace with actual values
      PEER_PUBKEY="client_public_key"
      PEER_ALLOWED_IPS="192.168.145.2/32"  # IP for the client in the tunnel
      
      # Add to WireGuard
      sudo wg set {{ wireguard_interface }} peer $PEER_PUBKEY allowed-ips $PEER_ALLOWED_IPS
      
      # Save the configuration
      sudo wg-quick save {{ wireguard_interface }}
      ```
      
      ## Checking Status
      
      Check WireGuard status with:
      
      ```bash
      sudo wg show
      ```
    mode: '0644'

- name: Enable and start WireGuard
  systemd:
    name: "wg-quick@{{ wireguard_interface }}"
    enabled: yes
    state: started
    
- name: Display WireGuard public key for reference
  debug:
    msg: "WireGuard public key: {{ wg_public_key.stdout }}"
