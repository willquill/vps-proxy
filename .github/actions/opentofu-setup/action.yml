name: OpenTofu

description: Executes OpenTofu Actions
inputs:
  plan:
    description: 'Run tofu plan'
    required: false
    default: 'false'
  apply:
    description: 'Run tofu apply'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Setup
      uses: opentofu/setup-opentofu@v1

    - name:  Init
      id: init
      run: tofu init
      shell: bash
      working-directory: ${{ env.tf_actions_working_dir }}

    - name: Check HCLOUD_TOKEN is set
      if: ${{ inputs.plan == 'true' }} || ${{ inputs.apply == 'true' }}
      shell: bash
      run: |
        if [ -z "${HCLOUD_TOKEN}" ]; then
          echo "HCLOUD_TOKEN is not set!"
          exit 1
        else
          echo "HCLOUD_TOKEN is set."
        fi

    - name: Plan
      if: ${{ inputs.plan == 'true' }}
      id: plan
      run: tofu plan
      shell: bash
      working-directory: ${{ env.tf_actions_working_dir }}

    - name: Plan Comment
      uses: actions/github-script@v6
      if: ${{ inputs.plan == 'true' }} && github.event_name == 'pull_request'
      env:
        PLAN: "tofu\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### OpenTofu Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### OpenTofu Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### OpenTofu Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### OpenTofu Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: OpenTofu Apply
      if: ${{ inputs.apply == 'true' }}
      id: apply
      run: tofu apply
      shell: bash
      working-directory: ${{ env.tf_actions_working_dir }}
