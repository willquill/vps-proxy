name: OpenTofu

description: Executes OpenTofu Actions
inputs:
  tofu_version:
    description: 'Version of OpenTofu to use'
    required: true
  init:
    description: 'Run tofu init'
    required: false
    default: 'true'
  fmt:
    description: 'Run tofu fmt'
    required: false
    default: 'false'
  validate:
    description: 'Run tofu validate'
    required: false
    default: 'false'
  plan:
    description: 'Run tofu plan'
    required: false
    default: 'false'
  apply:
    description: 'Run tofu apply'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Setup
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: ${{ inputs.tofu_version }}

    - name: Init
      if: ${{ inputs.init == 'true' }}
      run: tofu init
      shell: bash
      working-directory: ${{ env.tf_actions_working_dir }}

    - name: Format
      if: ${{ inputs.fmt == 'true' }}
      run: tofu fmt --check
      continue-on-error: true
      shell: bash
      working-directory: ${{ env.tf_actions_working_dir }}

    - name: Check HCLOUD_TOKEN is set
      if: ${{ inputs.plan == 'true' || inputs.apply == 'true' }}
      shell: bash
      run: |
        if [ -z "${HCLOUD_TOKEN}" ]; then
          echo "HCLOUD_TOKEN is not set!"
          exit 1
        else
          echo "HCLOUD_TOKEN is set."
        fi

    - name: Plan
      if: ${{ inputs.plan == 'true' }}
      id: plan
      run: |
        tofu plan | tee plan.out
        echo "stdout<<EOF" >> $GITHUB_OUTPUT
        cat plan.out >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      shell: bash
      working-directory: ${{ env.tf_actions_working_dir }}

    - name: Apply
      if: ${{ inputs.apply == 'true' }}
      run: tofu apply -auto-approve
      shell: bash
      working-directory: ${{ env.tf_actions_working_dir }}

outputs:
  init_outcome:
    description: "outcome from tofu init"
    value: ${{ steps.init.outcome }}
  plan_outcome:
    description: "outcome from tofu plan"
    value: ${{ steps.plan.outcome }}
  plan_stdout:
    description: "stdout from tofu plan"
    value: ${{ steps.plan.outputs.plan_stdout }}