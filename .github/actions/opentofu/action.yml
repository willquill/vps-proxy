name: OpenTofu

description: Executes OpenTofu Actions
inputs:
  tofu_version:
    description: 'Version of OpenTofu to use'
    required: true
  working_dir:
    description: 'Working directory for the action'
    required: true
  github_token:
    description: 'GitHub token to post comments on PRs'
    required: false
  event_name:
    description: 'GitHub event name, e.g. push or pull_request'
    required: false
  init:
    description: 'Run tofu init'
    required: false
    default: 'true'
  lint:
    description: 'Run tofu lint (fmt + validate)'
    required: false
    default: 'false'
  plan:
    description: 'Run tofu plan'
    required: false
    default: 'false'
  apply:
    description: 'Run tofu apply'
    required: false
    default: 'false'
outputs:
  fmt_outcome:
    description: "outcome from tofu fmt"
    value: ${{ steps.fmt.outcome }}
  validate_outcome:
    description: "outcome from tofu validate"
    value: ${{ steps.validate.outcome }}
  validate_stdout:
    description: "stdout from tofu validate"
    value: ${{ steps.validate.outputs.validate_stdout }}
  plan_outcome:
    description: "outcome from tofu plan"
    value: ${{ steps.plan.outcome }}
  plan_stdout:
    description: "stdout from tofu plan"
    value: ${{ steps.plan.outputs.plan_stdout }}

runs:
  using: "composite"
  steps:
    - name: Setup
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: ${{ inputs.tofu_version }}

    - name: Init
      id: init
      if: ${{ inputs.init == 'true' }}
      run: tofu init
      shell: bash
      working-directory: ${{ inputs.working_dir }}

    - name: Format
      id: fmt
      if: ${{ inputs.lint == 'true' }}
      run: tofu fmt --check
      continue-on-error: true
      shell: bash
      working-directory: ${{ inputs.working_dir }}

    # Validate, plan, and apply require this
    - name: Check HCLOUD_TOKEN is set
      shell: bash
      run: |
        if [ -z "${HCLOUD_TOKEN}" ]; then
          echo "HCLOUD_TOKEN is not set!"
          exit 1
        else
          echo "HCLOUD_TOKEN is set."
        fi

    - name: Validate
      id: validate
      if: ${{ inputs.lint == 'true' }}
      run: |
        set -e
        tofu validate -no-color | tee validate.out
        # Create composite action output
        {
          echo "validate_stdout<<EOF"
          cat validate.out
          echo "EOF"
        } >> "$GITHUB_OUTPUT"
      shell: bash
      working-directory: ${{ inputs.working_dir }}

    - name: lint comment
      uses: actions/github-script@v6
      if: ${{ inputs.lint == 'true' && inputs.event_name == 'pull_request' }}
      with:
        github_token: ${{ inputs.github_token }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Validate')
          })

          // 2. Prepare format of the comment
          const output = `#### OpenTofu Format and Validate ðŸ–Œ\`${{ steps.tofu-fmt.outputs.fmt_outcome }}\`
          #### OpenTofu Validation ðŸ¤–\`${{ steps.tofu-validate.outputs.validate_outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.tofu-validate.outputs.validate_stdout }}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ inputs.event_name }}\`, Working Directory: \`${{ inputs.working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: Set created timestamp (TZ from env secret)
      if: ${{ inputs.plan == 'true' || inputs.apply == 'true' }}
      shell: bash
      # Not all characters allowed in a Hetzner cloud label
      # https://docs.hetzner.cloud/reference/cloud#labels
      run: |
        CREATED=$(date +"%Y-%m-%dT%H.%M.%S%z")
        echo "TF_VAR_created_timestamp=$CREATED" >> $GITHUB_ENV

    - name: Plan
      if: ${{ inputs.plan == 'true' }}
      id: plan
      run: |
        set -e # Run plan and capture without color (recommended for comments)
        tofu plan -no-color | tee plan.out
        # Create composite action output
        {
          echo "plan_stdout<<EOF"
          cat plan.out
          echo "EOF"
        } >> "$GITHUB_OUTPUT"
      shell: bash
      working-directory: ${{ inputs.working_dir }}

    - name: Plan Comment
      uses: ./.github/actions/opentofu
      if: ${{ inputs.plan == 'true' && inputs.event_name == 'pull_request' }}
      env:
        PLAN: "tofu plan -no-color\n${{ steps.plan.outputs.plan_stdout }}"
      with:
        github_token: ${{ inputs.github_token }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Plan')
          })

          // 2. Prepare format of the comment
          const output = `#### OpenTofu Plan ðŸ“–\`${{ steps.plan.outputs.plan_outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.inputs.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ inputs.event_name }}\`, Working Directory: \`${{ inputs.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: Apply
      if: ${{ inputs.apply == 'true' }}
      run: tofu apply -auto-approve
      shell: bash
      working-directory: ${{ inputs.working_dir }}

    - name: Save OpenTofu output
      if: ${{ inputs.apply == 'true' }}
      run: tofu output -json > tf_output.json
      shell: bash
      working-directory: ${{ inputs.working_dir }}

    - name: Upload Terraform output
      if: ${{ inputs.apply == 'true' }} 
      uses: actions/upload-artifact@v4
      with:
        name: tf-output
        path: ${{ inputs.working_dir }}/tf_output.json
