name: Functional Tests

on:
  pull_request:
    branches: [main]
    paths:
      - "ansible/**"
      - "docker-compose.yml"
      - ".github/workflows/test.yml"
  # Allows manual triggering
  workflow_dispatch:
    inputs:
      version:
        description: "Ansible version to use"
        required: true
        default: "9.3.0"
        type: string

jobs:
  ansible:
    name: Ansible Tests with Molecule
    runs-on: ubuntu-latest
    env:
      ANSIBLE_VERSION: ${{ github.event.inputs.version || '9.3.0' }}
      ANSIBLE_FORCE_COLOR: "1"
    strategy:
      fail-fast: false
      matrix:
        scenario:
          - debian-13
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      # ---------- Setup tooling ----------
      - name: "Install Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: "Cache python packages"
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ env.ANSIBLE_VERSION }}-${{ matrix.scenario }}

      - name: "Install Ansible packages"
        shell: bash
        run: |
          python -m pip install ansible==${{ env.ANSIBLE_VERSION }} molecule molecule-docker

      - name: "Print Ansible version"
        run: ansible-playbook --version

      # ---------- Install Ansible Galaxy requirements ----------
      - name: Install Ansible Galaxy requirements
        run: |
          ansible-galaxy collection install -r ansible/galaxy-requirements.yml
          ansible-galaxy collection install -r ansible/roles/deploy/molecule/requirements.yml

      # Create necessary directories first
      - name: Create ansible tmp directory
        run: |
          mkdir -p /tmp/ansible-tmp
          chmod 1777 /tmp/ansible-tmp

      - name: Molecule
        uses: gofrolist/molecule-action@v2
        with:
          molecule_options: --debug
          molecule_command: test
          molecule_args: --scenario-name ${{ matrix.scenario }}
          molecule_working_dir: ansible/roles/deploy
        env:
          ANSIBLE_FORCE_COLOR: "1"
          ANSIBLE_REMOTE_TMP: "/tmp/ansible-tmp"
          ANSIBLE_LOCAL_TEMP: "/tmp/ansible-tmp"
          PYTHONUNBUFFERED: "1"
