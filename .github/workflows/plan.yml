name: Plan

on:
  # Allows manual triggering
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

env:
  TZ: ${{ secrets.TZ }}
  # AWS keys for S3 state backend
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # To populate Terraform variables
  TF_VAR_repo_owner: ${{ github.repository_owner }}
  TF_VAR_workflow_actor: ${{ github.actor }}
  TF_VAR_ssh_authorized_key: ${{ secrets.VPS_PROXY_KEY }}
  # Hetzner Cloud token required to create resources
  HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}

jobs:
  gate:
    name: gate
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Security workflow
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const targetName = 'Security'; // must exactly match the name: in the security workflow file
            const maxAttempts = 6;
            const delayMs = 10000;
            function sleep(ms){ return new Promise(r => setTimeout(r, ms)); }
            for (let i=0; i<maxAttempts; i++) {
              const runs = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                event: 'pull_request',
                per_page: 50
              });
              const run = runs.data.workflow_runs.find(r => r.name === targetName && r.head_sha === context.sha);
              if (run) {
                if (run.status === 'completed') {
                  if (run.conclusion !== 'success') {
                    core.setFailed(`Security workflow conclusion: ${run.conclusion}`);
                  }
                  return;
                }
              }
              await sleep(delayMs);
            }
            core.setFailed('Timed out waiting for security workflow to complete');

  plan:
    name: OpenTofu Plan
    runs-on: ubuntu-latest
    needs:
      - gate
    strategy:
      fail-fast: true
      matrix:
        include:
          - tofu_version: "~>1.10.6"
            working_dir: opentofu
    environment: hetzner-cloud
    env:
      tf_actions_working_dir: ${{ matrix.working_dir }}
      tofu_version: ${{ matrix.tofu_version }}

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.tofu_version }}-${{ matrix.working_dir }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v5

      - name: Plan
        id: plan
        uses: ./.github/actions/opentofu
        with:
          tofu_version: ${{ matrix.tofu_version }}
          plan: "true"

      - name: Plan Comment
        uses: actions/github-script@v6
        if: ${{ github.event_name == 'pull_request' }}
        env:
          PLAN: "tofu plan -no-color\n${{ steps.plan.outputs.plan_stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Plan')
            })

            // 2. Prepare format of the comment
            const output = `#### OpenTofu Plan ðŸ“–\`${{ steps.plan.outputs.plan_outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
