name: Lint & Plan
on:
  pull_request:
  push:
    branches: [main]

env:
  TZ: ${{ secrets.TZ }}
  # AWS keys for S3 state backend
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # To populate Terraform variables
  TF_VAR_repo_owner: ${{ github.repository_owner }}
  TF_VAR_workflow_actor: ${{ github.actor }}
  TF_VAR_ssh_authorized_key: ${{ secrets.VPS_PROXY_KEY }}
  # Hetzner Cloud token required to create resources
  HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}

jobs:
  wait-for-security:
    name: Wait for Security
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Security workflow
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const targetName = 'Security';
            const maxAttempts = 60; // 10 minutes
            const delayMs = 10000;
            function sleep(ms){ return new Promise(r => setTimeout(r, ms)); }

            console.log(`Looking for workflow: "${targetName}"`);
            console.log(`Event: ${context.eventName}`);
            console.log(`SHA: ${context.sha}`);

            for (let i=0; i<maxAttempts; i++) {
              console.log(`Attempt ${i+1}/${maxAttempts}`);
              
              const runs = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 50
              });
              
              console.log(`Found ${runs.data.workflow_runs.length} total workflow runs`);
              
              // Look for ANY security workflow run for this SHA, regardless of event
              const run = runs.data.workflow_runs.find(r => {
                console.log(`Checking run: ${r.name}, SHA: ${r.head_sha}, Status: ${r.status}, Event: ${r.event}`);
                return r.name === targetName && r.head_sha === context.sha;
              });
              
              if (run) {
                console.log(`Found matching run: Status=${run.status}, Conclusion=${run.conclusion}`);
                if (run.status === 'completed') {
                  if (run.conclusion !== 'success') {
                    core.setFailed(`Security workflow conclusion: ${run.conclusion}`);
                  }
                  console.log('Security workflow completed successfully!');
                  return;
                }
                console.log('Security workflow still running...');
              } else {
                console.log('No matching security workflow run found yet');
              }
              
              if (i < maxAttempts - 1) {
                await sleep(delayMs);
              }
            }
            core.setFailed('Timed out waiting for security workflow to complete');

  tofu-lint:
    name: Tofu Lint
    runs-on: ubuntu-latest
    needs: wait-for-security
    strategy:
      fail-fast: false
      matrix:
        include:
          - tofu_version: "~>1.10.6"
            working_dir: opentofu
          - tofu_version: "~>1.10.6"
            working_dir: tfstate
    environment: hetzner-cloud
    env:
      tf_actions_working_dir: ${{ matrix.working_dir }}
      tofu_version: ${{ matrix.tofu_version }}

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.tofu_version }}--${{ matrix.working_dir }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v5

      - name: Tofu fmt
        id: tofu-fmt
        uses: ./.github/actions/opentofu
        with:
          tofu_version: ${{ matrix.tofu_version }}
          init: "false"
          fmt: "true"

      - name: Tofu Validate
        id: tofu-validate
        uses: ./.github/actions/opentofu
        with:
          tofu_version: ${{ matrix.tofu_version }}
          validate: "true"

    outputs:
      fmt_outcome: ${{ steps.tofu-fmt.outputs.fmt_outcome }}
      validate_outcome: ${{ steps.tofu-validate.outputs.validate_outcome }}
      validate_stdout: ${{ steps.tofu-validate.outputs.validate_stdout }}

  tofu-plan:
    name: Tofu Plan
    needs:
      - tofu-lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - tofu_version: "~>1.10.6"
            working_dir: opentofu

    environment: hetzner-cloud
    env:
      tf_actions_working_dir: ${{ matrix.working_dir }}
      tofu_version: ${{ matrix.tofu_version }}

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.working_dir }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v5

      - name: Plan
        id: plan
        uses: ./.github/actions/opentofu
        with:
          tofu_version: ${{ matrix.tofu_version }}
          plan: "true"

      - name: Plan Comment
        uses: actions/github-script@v6
        if: ${{ github.event_name == 'pull_request' }}
        env:
          PLAN: "tofu plan -no-color\n${{ steps.plan.outputs.plan_stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### OpenTofu Format and Style ðŸ–Œ\`${{ needs.tofu-lint.outputs.fmt_outcome }}\`
            #### OpenTofu Validation ðŸ¤–\`${{ needs.tofu-lint.outputs.validate_outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ needs.tofu-lint.outputs.validate_stdout }}
            \`\`\`

            </details>

            #### OpenTofu Plan ðŸ“–\`${{ steps.plan.outputs.plan_outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            *Last updated: ${new Date().toLocaleString('en-US', { timeZone: 'America/Chicago' })}*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
