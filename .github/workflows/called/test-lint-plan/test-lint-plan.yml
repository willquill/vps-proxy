on:
  workflow_call:
    inputs:
      tf_actions_working_dir:
        description: 'Working directory for the action'
        required: true
      tofu_version:
        description: 'Version of OpenTofu to use'
        required: true
      event_name:
        description: 'The event that triggered the workflow'
        required: false
        default: 'push'
      github_token:
        description: 'GitHub token for commenting on PRs'
        required: false
        default: '${{ secrets.GITHUB_TOKEN }}'
      github_actor:
        description: 'GitHub actor who triggered the workflow'
        required: false
        default: '${{ github.actor }}'
      github_workflow:
        description: 'The name of the workflow'
        required: false
        default: '${{ github.workflow }}'

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v5

    - name: tofu format
      id: tofu-fmt
      uses: ./.github/actions/opentofu
      with:
        tofu_version: ${{ inputs.tofu_version }}
        init: "false"
        fmt: "true"

    - name: Tofu Validate
      id: tofu-validate
      uses: ./.github/actions/opentofu
      with:
        tofu_version: ${{ inputs.tofu_version }}
        validate: "true"

    - name: lint comment
      uses: actions/github-script@v6
      if: ${{ inputs.event_name == 'pull_request' }}
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Validate')
          })

          // 2. Prepare format of the comment
          const output = `#### OpenTofu Format and Validate ðŸ–Œ\`${{ steps.tofu-fmt.outputs.fmt_outcome }}\`
          #### OpenTofu Validation ðŸ¤–\`${{ steps.tofu-validate.outputs.validate_outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.tofu-validate.outputs.validate_stdout }}
          \`\`\`

          </details>

          *Pusher: @${{ inputs.github_actor }}, Action: \`${{ inputs.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ inputs.github_workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }