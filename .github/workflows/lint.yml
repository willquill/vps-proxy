name: Linting

on:
  pull_request:
    branches: [main]
    paths:
      - "**/*.yml"
      - "**/*.yaml"
      - "ansible/**"
      - "docker-compose.yml"
      - ".ansible-lint"
      - ".yamllint.yml"
  # Allows manual triggering
  workflow_dispatch:

jobs:
  ansible-lint:
    name: Ansible Lint
    runs-on: ubuntu-latest
    container:
      image: debian:latest
    steps:
      - uses: actions/checkout@v4
      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y build-essential python3 python3-pip python3-dev libyaml-dev git
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          pip3 install --only-binary :all: PyYAML
          pip3 install ansible-lint
      - name: Run ansible-lint
        run: ansible-lint ansible/**/*.yml

  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    container:
      image: debian:latest
    steps:
      - uses: actions/checkout@v4
      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y build-essential python3 python3-pip python3-dev libyaml-dev git
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          pip3 install --only-binary :all: PyYAML
          pip3 install yamllint
      - name: Run yamllint
        run: |
          yamllint -c .yamllint.yml . || echo "Consider adding a .yamllint.yml file to customize rules"
          yamllint .

  docker-compose-validate:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    container:
      image: debian:latest
    steps:
      - uses: actions/checkout@v4
      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y build-essential python3 python3-pip python3-dev libyaml-dev git
      - name: Install Docker Compose
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          pip3 install --only-binary :all: PyYAML
          pip3 install docker-compose
      - name: Create dummy env file for testing
        run: |
          # Create a minimal .env file with dummy values for validation
          cat > .env << EOF
          PUBLIC_HOSTNAME=example.com
          PUID=1000
          PGID=1000
          TZ=UTC
          CF_DNS_API_TOKEN=dummy_token
          CF_ZONE_API_TOKEN=dummy_token
          TRAEFIK_BASIC_AUTH_USERNAME=dummy_user
          TRAEFIK_BASIC_AUTH_PASSWORD=dummy_password
          AUTHENTIK_POSTGRESQL__NAME=authentik
          AUTHENTIK_POSTGRESQL__PASSWORD=dummy_password
          AUTHENTIK_POSTGRESQL__USER=authentik
          AUTHENTIK_SECRET_KEY=dummy_key
          EOF
      - name: Validate docker-compose.yml
        run: docker-compose config
