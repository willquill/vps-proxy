name: Lint

on:
  # Allows manual triggering
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

env:
  TZ: ${{ secrets.TZ }}
  # AWS keys for S3 state backend
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # To populate Terraform variables
  TF_VAR_repo_owner: ${{ github.repository_owner }}
  TF_VAR_workflow_actor: ${{ github.actor }}
  TF_VAR_ssh_authorized_key: ${{ secrets.VPS_PROXY_KEY }}
  # Hetzner Cloud token required to create resources
  HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}

jobs:
  lint:
    name: OpenTofu Lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        include:
          - tofu_version: "~>1.10.6"
            working_dir: opentofu
          - tofu_version: "~>1.10.6"
            working_dir: tfstate
    environment: hetzner-cloud
    env:
      tf_actions_working_dir: ${{ matrix.working_dir }}
      tofu_version: ${{ matrix.tofu_version }}

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.tofu_version }}-${{ matrix.working_dir }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v5

      - name: Tofu Format
        id: tofu-fmt
        uses: ./.github/actions/opentofu
        with:
          tofu_version: ${{ matrix.tofu_version }}
          init: "false"
          fmt: "true"

      - name: Tofu Validate
        id: tofu-validate
        uses: ./.github/actions/opentofu
        with:
          tofu_version: ${{ matrix.tofu_version }}
          validate: "true"

      - name: Lint Comment
        uses: actions/github-script@v6
        if: ${{ github.event_name == 'pull_request' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Validate')
            })

            // 2. Prepare format of the comment
            const output = `#### OpenTofu Format and Validate ðŸ–Œ\`${{ steps.tofu-fmt.outputs.fmt_outcome }}\`
            #### OpenTofu Validation ðŸ¤–\`${{ steps.tofu-validate.outputs.validate_outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.tofu-validate.outputs.validate_stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
