name: OpenTofu

on:
  # Allows manual triggering
  workflow_dispatch:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  # AWS keys for S3 state backend
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # To populate Terraform variables
  TF_VAR_repo_owner: ${{ github.repository_owner }}
  TF_VAR_workflow_actor: ${{ github.actor }}
  TF_VAR_ssh_authorized_key: ${{ secrets.VPS_PROXY_KEY }}
  # Hetzner Cloud token required to create resources
  HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}

jobs:
  security:
    uses: ./.github/workflows/checkov.yml
    strategy:
      fail-fast: false
      matrix:
        include:
          - working_dir: opentofu
          - working_dir: tfstate
    with:
      directory: ${{ matrix.working_dir }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - tofu_version: "~>1.10.6"
            working_dir: opentofu
          - tofu_version: "~>1.10.6"
            working_dir: tfstate
    environment: hetzner-cloud
    env:
      tf_actions_working_dir: ${{ matrix.working_dir }}
      tofu_version: ${{ matrix.tofu_version }}

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.tofu_version }}--${{ matrix.working_dir }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v5

      - name: tofu fmt
        id: fmt
        uses: ./.github/actions/opentofu
        with:
          tofu_version: ${{ matrix.tofu_version }}
          init: "false"
          fmt: "true"

      - name: tofu Validate
        id: validate
        uses: ./.github/actions/opentofu
        with:
          tofu_version: ${{ matrix.tofu_version }}
          validate: "true"

    outputs:
      fmt_outcome: ${{ steps.fmt.outcome }}
      validate_outcome: ${{ steps.validate.outcome }}
      validate_stdout: ${{ steps.validate.outputs.stdout }}

  plan:
    name: Plan
    needs:
      - security
      - lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - tofu_version: "~>1.10.6"
            working_dir: opentofu
    environment: hetzner-cloud
    env:
      tf_actions_working_dir: ${{ matrix.working_dir }}
      tofu_version: ${{ matrix.tofu_version }}

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.version }}-${{ matrix.working_dir }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v5

      - name: Plan
        id: plan
        uses: ./.github/actions/opentofu
        with:
          tofu_version: ${{ matrix.tofu_version }}
          plan: "true"

      - name: Plan Comment
        uses: actions/github-script@v6
        # if: ${{ github.event_name == 'pull_request' }}
        env:
          PLAN: "tofu\n${{ steps.plan.outputs.plan_stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### OpenTofu Format and Style üñå\`${{ needs.lint.outputs.fmt_outcome }}\`
            #### OpenTofu Initialization ‚öôÔ∏è\`${{ steps.plan.outputs.plan_outcome }}\`
            #### OpenTofu Validation ü§ñ\`${{ needs.lint.outputs.validate_outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ needs.lint.outputs.validate_stdout }}
            \`\`\`

            </details>

            #### OpenTofu Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  apply:
    name: Apply
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - tofu_version: "~>1.10.6"
            working_dir: opentofu
    environment: hetzner-cloud
    env:
      tf_actions_working_dir: ${{ matrix.working_dir }}
      tofu_version: ${{ matrix.tofu_version }}

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.tofu_version }}-${{ matrix.working_dir }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v5

      - name: Apply
        id: apply
        uses: ./.github/actions/opentofu
        with:
          tofu_version: ${{ matrix.tofu_version }}
          apply: "true"

  # Disabled for now because I lint locally
  #   ansible-lint:
  #     name: Ansible Lint
  #     runs-on: ubuntu-24.04
  #     steps:
  #       - uses: actions/checkout@v5
  #       - name: Run ansible-lint
  #         uses: ansible/ansible-lint@main # or vX.X.X version
  #         # optional (see below):
  #         with:
  #           args: ""
  #           #gh_action_ref: "<version - e.g. `v25.5.0`>" # Not recommended for non-composite action use
  #           setup_python: "true"
  #           working_directory: ""
  #           requirements_file: ""

  #   yaml-lint:
  #     name: Yaml Lint
  #     runs-on: ubuntu-latest
  #     steps:
  #       - uses: actions/checkout@v5
  #       - name: yaml-lint
  #         uses: ibiqlik/action-yamllint@v3
  #       - run: echo ${{ steps.yaml-lint.outputs.logfile }}
  #       - uses: actions/upload-artifact@v4
  #         if: always()
  #         with:
  #           name: yamllint-logfile
  #           path: ${{ steps.yaml-lint.outputs.logfile }}
