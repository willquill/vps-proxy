x-user: &user
  user: ${PUID:-1000}
  group_add:
    - ${PGID:-1000}

x-networks-proxy: &networks-proxy
  networks:
    proxy: {}

x-environment: &environment
  environment:
    - TZ=$TZ
    - PUID=$PUID
    - PGID=$PGID

x-security: &security
  security_opt:
    - no-new-privileges:true

x-proxy-labels: &proxy-labels
  traefik.enable: true
  traefik.docker.network: "proxy"

services:
  cloudflare-ddns:
    image: favonia/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    network_mode: host
    restart: always
    user: "$PUID:$PGID"
    read_only: true
    # Make the container filesystem read-only (optional but recommended)
    cap_drop: [all]
    # Drop all Linux capabilities (optional but recommended)
    environment:
      - CLOUDFLARE_API_TOKEN=$CF_DNS_API_TOKEN
        # Your Cloudflare API token
      - DOMAINS=$PUBLIC_HOSTNAME
      # Tell Cloudflare to cache webpages and hide your IP (optional)
      - PROXIED=false
      - IP6_PROVIDER=none
  traefik:
    image: traefik:v3.4
    container_name: traefik
    restart: unless-stopped
    networks:
      proxy:
        aliases:
          - "auth.${PUBLIC_HOSTNAME}"
    <<: [*security]
    ports:
      - 22:22 # for GitLab and anything else I want to add
      - 80:80
      - 443:443
      - 389:389 # LDAP
      - 636:636 # LDAPS
      - 8883:8883 # entrypoint: mqtt tls port
      - 8083:8083 # entrypoint: websocket port for mqtt (TLS)
    environment:
      - TZ=$TZ
      # https://go-acme.github.io/lego/dns/cloudflare/
      # Zone / Zone / Read on the specific zone for which I use Traefik
      - CF_ZONE_API_TOKEN=$CF_ZONE_API_TOKEN # Cloudflare Zone API token
      # Zone / DNS / Edit on the specific zone for which I use Traefik
      - CF_DNS_API_TOKEN=$CF_DNS_API_TOKEN # Cloudflare DNS API token
      - PUBLIC_HOSTNAME # required for tautulli in dynamic files
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik/config:/etc/traefik/config:ro
      - ./config/traefik/traefik.yml:/traefik.yml:ro
      - ./config/traefik/acme.json:/acme.json:rw
      - ./config/traefik/usersfile.txt:/usersfile.txt
    labels:
      traefik.enable: true
      traefik.http.routers.traefik.entrypoints: "http"
      traefik.http.routers.traefik.rule: "Host(`traefik.${PUBLIC_HOSTNAME}`)"
      traefik.http.middlewares.traefik-auth.basicauth.usersfile: "/usersfile.txt"
      traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme: "https"
      traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto: "https"
      traefik.http.routers.traefik.middlewares: "traefik-https-redirect,private@file"
      traefik.http.routers.traefik-secure.entrypoints: "https"
      traefik.http.routers.traefik-secure.rule: "Host(`traefik.${PUBLIC_HOSTNAME}`)"
      # FIXME: Using "private" middleware from dynamic file config, so not accessible publicly
      traefik.http.routers.traefik-secure.middlewares: "traefik-auth,private@file"
      traefik.http.routers.traefik-secure.tls: "true"
      traefik.http.routers.traefik-secure.tls.certresolver: "cloudflare"
      traefik.http.routers.traefik-secure.tls.domains[0].main: "${PUBLIC_HOSTNAME}"
      traefik.http.routers.traefik-secure.tls.domains[0].sans: "*.${PUBLIC_HOSTNAME}"
      traefik.http.routers.traefik-secure.service: "api@internal"
  # overseerr:
  #   image: lscr.io/linuxserver/overseerr
  #   container_name: overseerr
  #   restart: unless-stopped
  #   <<: [*networks-proxy, *environment]
  #   labels:
  #     com.centurylinklabs.watchtower.enable: "true"
  #     <<: *proxy-labels
  #     traefik.http.routers.overseerr.entrypoints: "http"
  #     traefik.http.routers.overseerr.rule: "Host(`media.${PUBLIC_HOSTNAME}`)"
  #     traefik.http.middlewares.overseerr-https-redirect.redirectscheme.scheme: "https"
  #     traefik.http.routers.overseerr.middlewares: "overseerr-https-redirect"
  #     traefik.http.routers.overseerr-secure.entrypoints: "https"
  #     traefik.http.routers.overseerr-secure.rule: "Host(`media.${PUBLIC_HOSTNAME}`)"
  #     traefik.http.routers.overseerr-secure.tls: "true"
  #     traefik.http.routers.overseerr-secure.service: "overseerr"
  #     traefik.http.services.overseerr.loadbalancer.server.port: "5055"
  #     traefik.http.routers.overseerr-secure.middlewares: "public@file"
  #   volumes:
  #     - ./config/overseerr:/config
  #   pull_policy: always
  # tautulli:
  #   image: lscr.io/linuxserver/tautulli:latest
  #   container_name: tautulli
  #   restart: unless-stopped
  #   <<: [*networks-proxy, *environment]
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - ./config/tautulli:/config
  #   labels:
  #     com.centurylinklabs.watchtower.enable: "true"
  #     <<: *proxy-labels
  #     traefik.http.routers.tautulli.entrypoints: "http"
  #     traefik.http.routers.tautulli.rule: "Host(`history.${PUBLIC_HOSTNAME}`)"
  #     traefik.http.middlewares.tautulli-https-redirect.redirectscheme.scheme: "https"
  #     traefik.http.routers.tautulli.middlewares: "tautulli-https-redirect"
  #     traefik.http.routers.tautulli-secure.entrypoints: "https"
  #     traefik.http.routers.tautulli-secure.rule: "Host(`history.${PUBLIC_HOSTNAME}`)"
  #     traefik.http.routers.tautulli-secure.tls: "true"
  #     traefik.http.routers.tautulli-secure.service: "tautulli"
  #     traefik.http.services.tautulli.loadbalancer.server.port: "8181"
  #   pull_policy: always
  # wrapperr:
  #   image: ghcr.io/aunefyren/wrapperr:latest
  #   container_name: wrapperr
  #   restart: unless-stopped
  #   <<: [*networks-proxy, *environment]
  #   volumes:
  #     - ./config/wrapperr:/app/config
  #   labels:
  #     com.centurylinklabs.watchtower.enable: "true"
  #     <<: *proxy-labels
  #     traefik.http.routers.wrapperr.entrypoints: "http"
  #     traefik.http.routers.wrapperr.rule: "Host(`wrap.${PUBLIC_HOSTNAME}`)"
  #     traefik.http.middlewares.wrapperr-https-redirect.redirectscheme.scheme: "https"
  #     traefik.http.routers.wrapperr.middlewares: "wrapperr-https-redirect"
  #     traefik.http.routers.wrapperr-secure.entrypoints: "https"
  #     traefik.http.routers.wrapperr-secure.rule: "Host(`wrap.${PUBLIC_HOSTNAME}`)"
  #     traefik.http.routers.wrapperr-secure.tls: "true"
  #     traefik.http.routers.wrapperr-secure.service: "wrapperr"
  #     traefik.http.services.wrapperr.loadbalancer.server.port: "8282"
  #     traefik.http.routers.wrapperr-secure.middlewares: "public@file"
  #   pull_policy: always
  # watchtower manages auto updates. this is optional.
  watchtower:
    image: containrrr/watchtower
    restart: unless-stopped
    environment:
      # Requires label: - "com.centurylinklabs.watchtower.enable=true"
      - WATCHTOWER_LABEL_ENABLE
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # check for updates once an hour (interval is in seconds)
    command: --interval 3600 --cleanup

networks:
  proxy:
    external: true
    name: "proxy"
